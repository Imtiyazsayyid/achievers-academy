// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Student {
  id       Int    @id @default(autoincrement())
  name     String
  email    String @unique
  password String
  grade_id Int
  grade    Grade  @relation(fields: [grade_id], references: [id])
  board_id Int
  board    Board  @relation(fields: [board_id], references: [id])

  status     Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model Grade {
  id      Int       @id @default(autoincrement())
  name    String
  subject Subject[]
  student Student[]

  status     Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model Board {
  id   Int    @id @default(autoincrement())
  name String
  key  String

  subjects Subject[]
  students Student[]

  status     Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model Subject {
  id       Int       @id @default(autoincrement())
  name     String
  key      String
  board_id Int
  board    Board     @relation(fields: [board_id], references: [id])
  grade_id Int
  grade    Grade     @relation(fields: [grade_id], references: [id])
  chapters Chapter[]

  status     Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model Chapter {
  id         Int     @id @default(autoincrement())
  name       String
  subject_id Int
  subject    Subject @relation(fields: [subject_id], references: [id])
  topics     Topic[]

  status     Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model Topic {
  id             Int            @id @default(autoincrement())
  name           String
  description    String?        @db.Text
  video          String?        @db.Text
  pdf            String?        @db.Text
  chapter_id     Int
  chapter        Chapter        @relation(fields: [chapter_id], references: [id])
  quiz_questions QuizQuestion[]

  status     Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model QuizQuestion {
  id       Int                   @id @default(autoincrement())
  question String
  topic_id Int
  topic    Topic                 @relation(fields: [topic_id], references: [id])
  correctOption Int?

  type     QuizQuestionType      
  options  QuizQuestionOption[]

  status     Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model QuizQuestionOption {
  id               Int          @id @default(autoincrement())
  text             String
  option_number    Int
  quiz_question_id Int
  quiz_question    QuizQuestion @relation(fields: [quiz_question_id], references: [id])


  status     Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

enum QuizQuestionType {
  MULTIPLE_CHOICE
  LONG_ANSWER
}